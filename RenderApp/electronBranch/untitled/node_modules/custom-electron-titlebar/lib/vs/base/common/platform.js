"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

var _a;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isLittleEndian = exports.OS = exports.setImmediate = exports.globals = exports.translationsConfigFile = exports.locale = exports.Language = exports.language = exports.isRootUser = exports.userAgent = exports.platform = exports.isIOS = exports.isWeb = exports.isNative = exports.isLinux = exports.isMacintosh = exports.isWindows = exports.PlatformToString = void 0;
const LANGUAGE_DEFAULT = 'en';
let _isWindows = false;
let _isMacintosh = false;
let _isLinux = false;
let _isNative = false;
let _isWeb = false;
let _isIOS = false;
let _locale = undefined;
let _language = LANGUAGE_DEFAULT;
let _translationsConfigFile = undefined;
let _userAgent = undefined;

const _globals = typeof self === 'object' ? self : typeof global === 'object' ? global : {};

let nodeProcess = undefined;

if (typeof process !== 'undefined') {
  // Native environment (non-sandboxed)
  nodeProcess = process;
} else if (typeof _globals.vscode !== 'undefined') {
  // Native envionment (sandboxed)
  nodeProcess = _globals.vscode.process;
}

const isElectronRenderer = typeof ((_a = nodeProcess === null || nodeProcess === void 0 ? void 0 : nodeProcess.versions) === null || _a === void 0 ? void 0 : _a.electron) === 'string' && nodeProcess.type === 'renderer'; // Web environment

if (typeof navigator === 'object' && !isElectronRenderer) {
  _userAgent = navigator.userAgent;
  _isWindows = _userAgent.indexOf('Windows') >= 0;
  _isMacintosh = _userAgent.indexOf('Macintosh') >= 0;
  _isIOS = (_userAgent.indexOf('Macintosh') >= 0 || _userAgent.indexOf('iPad') >= 0 || _userAgent.indexOf('iPhone') >= 0) && !!navigator.maxTouchPoints && navigator.maxTouchPoints > 0;
  _isLinux = _userAgent.indexOf('Linux') >= 0;
  _isWeb = true;
  _locale = navigator.language;
  _language = _locale;
} // Native environment
else if (typeof nodeProcess === 'object') {
    _isWindows = nodeProcess.platform === 'win32';
    _isMacintosh = nodeProcess.platform === 'darwin';
    _isLinux = nodeProcess.platform === 'linux';
    _locale = LANGUAGE_DEFAULT;
    _language = LANGUAGE_DEFAULT;
    const rawNlsConfig = nodeProcess.env['VSCODE_NLS_CONFIG'];

    if (rawNlsConfig) {
      try {
        const nlsConfig = JSON.parse(rawNlsConfig);
        const resolved = nlsConfig.availableLanguages['*'];
        _locale = nlsConfig.locale; // VSCode's default language is 'en'

        _language = resolved ? resolved : LANGUAGE_DEFAULT;
        _translationsConfigFile = nlsConfig._translationsConfigFile;
      } catch (e) {}
    }

    _isNative = true;
  } // Unknown environment
  else {
      console.error('Unable to resolve platform.');
    }

function PlatformToString(platform) {
  switch (platform) {
    case 0
    /* Web */
    :
      return 'Web';

    case 1
    /* Mac */
    :
      return 'Mac';

    case 2
    /* Linux */
    :
      return 'Linux';

    case 3
    /* Windows */
    :
      return 'Windows';
  }
}

exports.PlatformToString = PlatformToString;
let _platform = 0
/* Web */
;

if (_isMacintosh) {
  _platform = 1
  /* Mac */
  ;
} else if (_isWindows) {
  _platform = 3
  /* Windows */
  ;
} else if (_isLinux) {
  _platform = 2
  /* Linux */
  ;
}

exports.isWindows = _isWindows;
exports.isMacintosh = _isMacintosh;
exports.isLinux = _isLinux;
exports.isNative = _isNative;
exports.isWeb = _isWeb;
exports.isIOS = _isIOS;
exports.platform = _platform;
exports.userAgent = _userAgent;

function isRootUser() {
  return !!nodeProcess && !_isWindows && nodeProcess.getuid() === 0;
}

exports.isRootUser = isRootUser;
/**
 * The language used for the user interface. The format of
 * the string is all lower case (e.g. zh-tw for Traditional
 * Chinese)
 */

exports.language = _language;
var Language;

(function (Language) {
  function value() {
    return exports.language;
  }

  Language.value = value;

  function isDefaultVariant() {
    if (exports.language.length === 2) {
      return exports.language === 'en';
    } else if (exports.language.length >= 3) {
      return exports.language[0] === 'e' && exports.language[1] === 'n' && exports.language[2] === '-';
    } else {
      return false;
    }
  }

  Language.isDefaultVariant = isDefaultVariant;

  function isDefault() {
    return exports.language === 'en';
  }

  Language.isDefault = isDefault;
})(Language = exports.Language || (exports.Language = {}));
/**
 * The OS locale or the locale specified by --locale. The format of
 * the string is all lower case (e.g. zh-tw for Traditional
 * Chinese). The UI is not necessarily shown in the provided locale.
 */


exports.locale = _locale;
/**
 * The translatios that are available through language packs.
 */

exports.translationsConfigFile = _translationsConfigFile;
exports.globals = _globals;

exports.setImmediate = function defineSetImmediate() {
  if (exports.globals.setImmediate) {
    return exports.globals.setImmediate.bind(exports.globals);
  }

  if (typeof exports.globals.postMessage === 'function' && !exports.globals.importScripts) {
    let pending = [];
    exports.globals.addEventListener('message', e => {
      if (e.data && e.data.vscodeSetImmediateId) {
        for (let i = 0, len = pending.length; i < len; i++) {
          const candidate = pending[i];

          if (candidate.id === e.data.vscodeSetImmediateId) {
            pending.splice(i, 1);
            candidate.callback();
            return;
          }
        }
      }
    });
    let lastId = 0;
    return callback => {
      const myId = ++lastId;
      pending.push({
        id: myId,
        callback: callback
      });
      exports.globals.postMessage({
        vscodeSetImmediateId: myId
      }, '*');
    };
  }

  if (nodeProcess) {
    return nodeProcess.nextTick.bind(nodeProcess);
  }

  const _promise = Promise.resolve();

  return callback => _promise.then(callback);
}();

exports.OS = _isMacintosh || _isIOS ? 2
/* Macintosh */
: _isWindows ? 1
/* Windows */
: 3
/* Linux */
;
let _isLittleEndian = true;
let _isLittleEndianComputed = false;

function isLittleEndian() {
  if (!_isLittleEndianComputed) {
    _isLittleEndianComputed = true;
    const test = new Uint8Array(2);
    test[0] = 1;
    test[1] = 2;
    const view = new Uint16Array(test.buffer);
    _isLittleEndian = view[0] === (2 << 8) + 1;
  }

  return _isLittleEndian;
}

exports.isLittleEndian = isLittleEndian;